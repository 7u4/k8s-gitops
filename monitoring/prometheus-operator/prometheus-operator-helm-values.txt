alertmanager:
  ingress:
    hosts: [prom-alert.$DOMAIN]
    tls:
    - hosts:
      - prom-alert.$DOMAIN
    annotations:
      nginx.ingress.kubernetes.io/auth-url: "https://auth.$DOMAIN/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: https://auth.$DOMAIN/oauth2/start
  config:
    global:
      slack_api_url: $SLACK_WEBHOOK_URL
    receivers:
    - name: 'null'
    - name: 'slack-notifications'
      slack_configs:
        - channel: '#notifications'
          icon_url: https://avatars3.githubusercontent.com/u/3380462
          username: 'Alertmanager'
          send_resolved: true
          title: |-
            [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
            {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
              {{" "}}(
              {{- with .CommonLabels.Remove .GroupLabels.Names }}
                {{- range $index, $label := .SortedPairs -}}
                  {{ if $index }}, {{ end }}
                  {{- $label.Name }}="{{ $label.Value -}}"
                {{- end }}
              {{- end -}}
              )
            {{- end }}
          text: >-
            {{ range .Alerts -}}
              *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

            *Message:* {{ .Annotations.message }}

            *Details:*
              {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
              {{ end }}
            {{ end }}
    - name: 'pagerduty'
      pagerduty_configs:
        - service_key: $PD_TOKEN
          description: |-
            {{ if ne .Annotations.message ""}}{{ .Annotations.message }}{{ else }}{{ template "pagerduty.default.description" }}{{ end }}

prometheus:
  ingress:
    hosts: [prom-server.$DOMAIN]
    tls:
    - hosts:
      - prom-server.$DOMAIN
    annotations:
      nginx.ingress.kubernetes.io/auth-url: "https://auth.$DOMAIN/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: https://auth.$DOMAIN/oauth2/start
  prometheusSpec:
    additionalScrapeConfigs:
    - job_name: 'wmi-exporter-scrape'
      metrics_path: '/metrics'
      params:
        format: [prometheus]
      honor_labels: true
      static_configs:
      - targets:
        - nvr:9182
    - job_name: 'node'
      static_configs:
      - targets:
        - proxmox:9100
        - proxmox-b:9100
        - proxmox-c:9100
        - whitebridge:9100
    - job_name: 'home-assistant'
      scrape_interval: 60s
      metrics_path: '/api/prometheus'
      bearer_token: '$PROM_HASS_TOKEN'
      scheme: http
      static_configs:
      - targets: 
        - home-assistant.default.svc:8123
    - job_name: 'upsc-exporter'
      static_configs:
      - targets:
        - proxmox:9102
        - proxmox-b:9102
        - proxmox-c:9102
        - k3s-pi4-c:9102
grafana:
  ingress:
    hosts: [grafana.$DOMAIN]
    tls:
    - hosts:
      - grafana.$DOMAIN
  adminPassword: "$GRAFANA_PASSWORD"
  grafana.ini:
    server:
      root_url: https://grafana.${DOMAIN}
    auth.basic:
      disable_login_form: true
    auth.generic_oauth:
      enabled: true
      allow_sign_up: true
      team_ids:
      allowed_organizations:
      name: Auth0
      client_id: $AUTH0_GRAFANA_CLIENT_ID
      client_secret: $AUTH0_GRAFANA_CLIENT_SECRET
      scopes: openid profile email
      auth_url: https://${AUTH0_DOMAIN}.auth0.com/authorize
      token_url: https://${AUTH0_DOMAIN}.auth0.com/oauth/token
      api_url: https://${AUTH0_DOMAIN}.auth0.com/userinfo
