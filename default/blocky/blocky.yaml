---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: blocky
  namespace: default
  annotations:
    fluxcd.io/ignore: false
    fluxcd.io/automated: "true"
    fluxcd.io/tag.chart-image: 'regexp:^v([0-9]+\.[0-9]+)$'
spec:
  releaseName: blocky
  helmVersion: v3
  rollback:
    enable: true
  chart:
    repository: https://billimek.com/billimek-charts/
    name: blocky
    version: 2.0.0
  values:
    image:
      repository: spx01/blocky
      tag: v0.5
    replicas: 2
    timeZone: "America/New_York"

    # blocky configuration
    config: |
      upstream:
          externalResolvers:
            - udp:10.0.7.1
      # optional: custom IP address for domain name (with all sub-domains)
      # example: query "printer.lan" or "my.printer.lan" will return 192.168.178.3
      # customDNS:
      #     mapping:
      #       printer.lan: 192.168.178.3
      # optional: definition, which DNS resolver should be used for queries to the domain (with all sub-domains).
      # Example: Query client.fritz.box will ask DNS server 192.168.178.1. This is necessary for local network, to resolve clients by host name
      # conditional:
      #     mapping:
      #       fritz.box: udp:192.168.178.1
      # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
      blocking:
          # definition of blacklist groups. Can be external link (http/https) or local file
          blackLists:
            ads:
              - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
              - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
              - https://mirror1.malwaredomains.com/files/justdomains
              - http://sysctl.org/cameleon/hosts
              - https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist
              - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
            special:
              - https://hosts-file.net/ad_servers.txt
          # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
          # whiteLists:
          #   ads:
          #     - whitelist.txt
          # definition: which groups should be applied for which client
          clientGroupsBlock:
            # default will be used, if no special definition for a client name exists
            default:
              - ads
              - special
            # use client name or ip address
            # laptop.fritz.box:
            #   - ads
          # which response will be sent, if query is blocked:
          # zeroIp: 0.0.0.0 will be returned (default)
          # nxDomain: return NXDOMAIN as return code
          blockType: zeroIp
          # optional: automatically list refresh period in minutes. Default: 4h.
          # Negative value -> deactivate automatically refresh.
          # 0 value -> use default
          refreshPeriod: 1
      # optional: configuration for caching of DNS responses
      caching:
        # amount in minutes, how long a response must be cached (min value).
        # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
        # Default: 0
        minTime: 40
        # amount in minutes, how long a response must be cached (max value).
        # If <0, do not cache responses
        # If 0, use TTL
        # If > 0, use this value, if TTL is greater
        # Default: 0
        maxTime: -1
      # optional: configuration for prometheus metrics endpoint
      prometheus:
        # enabled if true
        enable: true
        # port, optional (default 4000)
        # port: 4000
        # url path, optional (default '/metrics')
        path: /metrics
      # optional: HTTP listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, ...
      httpPort: 4000
      # optional: Log level (one from debug, info, warn, error). Default: info
      logLevel: info

    # Probes configuration
    probes:
      liveness:
        failureThreshold: 5
        periodSeconds: 10
      readiness:
        failureThreshold: 5
        periodSeconds: 10
      startup:
        initialDelaySeconds: 5
        failureThreshold: 30
        periodSeconds: 10

    serviceTCP:
      enabled: true
      type: LoadBalancer
      externalTrafficPolicy: Local
      loadBalancerIP: 10.2.0.170
        # a fixed LoadBalancer IP
      annotations:
        metallb.universe.tf/address-pool: network-services
        metallb.universe.tf/allow-shared-ip: blocky-svc

    serviceUDP:
      enabled: true
      type: LoadBalancer
      externalTrafficPolicy: Local
      loadBalancerIP: 10.2.0.170
        # a fixed LoadBalancer IP
      annotations:
        metallb.universe.tf/address-pool: network-services
        metallb.universe.tf/allow-shared-ip: blocky-svc

    serviceMonitor:
      enabled: true

    tolerations:
    - key: "arm"
      operator: "Exists"

    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: 
                - blocky
            topologyKey: "kubernetes.io/hostname"
